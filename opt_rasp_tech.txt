# Optimization Techniques Used for Raspberry Pi 4

I implemented several optimization techniques to make the code run efficiently on Raspberry Pi 4:

## 1. **Headless Operation**
- Removed all GUI components (`cv2.imshow`, `cv2.waitKey`, display rendering)
- Eliminated display frame resizing and drawing operations
- Added non-blocking keyboard input for terminal control

## 2. **Reduced Resolution and Frame Rate**
- Lowered camera resolution from 1280×720 to 640×480 (4x fewer pixels)
- Reduced FPS to 15 (from typically 30)
- Implemented frame skipping (process every 2nd frame)

## 3. **Model Optimization**
- Reduced MiDaS input size from default to 256×256 (smaller, faster processing)
- Reduced YOLO inference size from 640 to 320 pixels
- Lowered confidence threshold from 0.6 to 0.5 (faster processing)
- Set TensorFlow to use only 2 threads instead of 4

## 4. **Memory Optimization**
- Simplified object tracking by removing depth history and stabilization
- Eliminated display-related buffers and image processing
- Reduced deque history length

## 5. **Computational Efficiency**
- Removed all OpenCV drawing operations (rectangles, text, etc.)
- Eliminated coordinate scaling calculations
- Simplified depth labeling function to return only essential data

## 6. **Resource Management**
- Added `time.sleep(0.01)` to reduce CPU usage in the main loop
- Disabled pygame video initialization with dummy driver
- Set minimal display mode for pygame

## 7. **Code Simplification**
- Removed the `save_result_frame` function (not needed in headless mode)
- Simplified the object tracker class
- Removed unused functions like `calculate_scale_factor`

## 8. **Input Handling**
- Replaced OpenCV keyboard input with terminal-based input
- Added proper shutdown handling with try/finally blocks

## 9. **Performance-Critical Adjustments**
- Reduced quality settings where visual output wasn't required
- Balanced between accuracy and speed for real-time operation
- Optimized memory usage for limited Raspberry Pi resources

These optimizations significantly reduce the computational load, memory usage, and power consumption while maintaining the core functionality of object detection, distance estimation, and text-to-speech alerts. The system should now run efficiently on Raspberry Pi 4 hardware without a display.